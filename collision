width = 700;
height = 700;
class ball:
    def __init__(self, xpos,ypos,xspeed,yspeed,col,mass):
        self.x = xpos;
        self.y = ypos;
        self.xspeed = xspeed;
        self.yspeed = yspeed;
        self.col = col;
        self.mass = mass;
        
    def update(self):
        if self.x > width:
            self.x =1;
        if self.y > height:
            self.y = 1;
        if self.x < 0:
            self.x =width-1;
        if self.y < 0:
            self.y = height-1;
        self.x = self.x + self.xspeed;
        self.y =self.y + self.yspeed;
        
    def display(self):
        fill(self.col);
        rectMode(CENTER);
        rect(self.x, self.y , 20,20);
    

balls = [];

def setup():
    size(height,width);
    background(255);
    #frameRate(10);

ballspos = []

def currepos():
    ballspos = []
    for b in range(len(balls)):
        topLeft = ((int(balls[b].x))-10, int((balls[b].y))-10)
        bottomRight = ((int(balls[b].x))+10, int((balls[b].y))+10)
        oppcorners = (topLeft,bottomRight)
        ballspos.append(oppcorners) 
    return ballspos

#stores postions of every ball as a tuple of tuples, containing coords for opposite corners

def debug():
    for i in range(len(balls)):
        stroke(255,0,0)
        first = balls[i].x
        seond = balls[i].y
        third = balls[i].x + balls[i].xspeed*10
        fourth= balls[i].y + balls[i].yspeed*10
        line(first,seond,third,fourth)
    
    for i in range(len(balls)):
        noFill();
        stroke(balls[i].col)
        rectMode(CENTER);
        rect(balls[i].x, balls[i].y, 60,60);
        

def draw():
    background(255)
    #comment out above line to show trails

    if mousePressed:
        balls.append( ball(mouseX,mouseY,random(-10,10),random(-10,10), color(random(0,255),random(0,255),random(0,255)),random(1,20)));
        
    
    for i in range(len(balls)):
        balls[i].display();
        balls[i].update();


    #debug()
    pos = currepos()
    
    for i in range(len(pos)):
        for j in range(len(pos)):
            
            
            leftx   = pos[i][0][0] - 20
            lefty   = pos[i][0][1] - 20
            rightx = pos[i][1][0] + 20
            righty = pos[i][1][1] + 20
            # getting the postion of both corners and expanding to postions diagonally away from the centre
            
            dinXband = False
            dinYband = False
            ainXband = False
            ainYband = False
            
            #d and a refer to the coords of the ball we are checking, d is right and a is left.
            #I use band to mean the region bound by the inequality aX < region < dX, this will be a vertical band
            #that contains the 'ball' (called ball actually a rectangle)
            
            if pos[j][0][0] >= leftx and pos[j][0][0] <= rightx:
                ainXband = True
            if pos[j][0][1] >= lefty and pos[j][0][1] <= righty:
                ainYband = True
            if pos[j][1][0] >= leftx and pos[j][1][0] <= rightx:
                dinXband = True
            if pos[j][1][1] >= lefty and pos[j][1][1] <= righty:
                dinYband = True
            
            if i == j or i > j:
                #a ball cant collide with itself!
                pass
            
            elif ainXband and ainYband and dinXband and dinYband:
                print('ball: ' + str(i) + ' and ball: ' + str(j))
                print(str(i) + ' centre at: ' +str(pos[i]) + str(j) + ' centre at: ' + str(pos[j]))
                print(str(i) +' has mass ' + str(balls[i].mass))
                print(str(j) +' has mass ' + str(balls[j].mass))
                
                massMul = ((balls[i].mass - balls[j].mass)/(balls[i].mass + balls[j].mass))
                
                velIfinalx = massMul*balls[i].xspeed + ((2*balls[j].mass)/(balls[i].mass + balls[j].mass))*balls[j].xspeed
                velIfinaly = massMul*balls[i].yspeed + ((2*balls[j].mass)/(balls[i].mass + balls[j].mass))*balls[j].yspeed
                velJfinalx = ((2*balls[i].mass)/(balls[i].mass + balls[j].mass))*balls[i].xspeed - massMul*balls[j].xspeed
                velJfinaly = ((2*balls[i].mass)/(balls[i].mass + balls[j].mass))*balls[i].yspeed - massMul*balls[j].yspeed
                
                #elastic collision
                
                print('Velcocity magnitude in x & y for i and j: ' + str(velIfinalx) + ':' + str(velIfinaly) + ':' + str(velJfinalx) + ':' + str(velJfinaly))
                print('   ')
                
                balls[i].xspeed = velIfinalx
                balls[i].yspeed = velIfinaly
                balls[j].xspeed = velJfinalx
                balls[j].yspeed = velJfinaly
                
                balls[i].x += 1
                balls[j].x -= 1
                balls[i].y += 1
                balls[j].y -= 1
                
                #slight off set in postion to reduce immdiate recollision
                
            else:
                pass
    
                
            #the logic is that both corners have to be in both bands to collide
    
