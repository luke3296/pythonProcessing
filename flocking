width  = 800
height = 800

class vector:
    def __init__(self,direc,magi):
        self.direction = direc;
        self.magnitude = magi;
        self.xComp  = cos(self.direction)*self.magnitude;
        self.yComp = sin(self.direction)*self.magnitude;

    def update(self):
        self.xComp  = cos(self.direction)*self.magnitude;
        self.yComp = sin(self.direction)*self.magnitude;

class boid:
    def __init__(self,posx,posy):
        self.x = posx;
        self.y = posy;
        self.vel = vector(random(0,6.28),5)
        self.accel = vector(0,1)
    
    def show(self):
        fill(255)
        rect(self.x,self.y,10,10)
    
    def allign(self):
        sumdirec = self.vel.direction
        numOfNeighbors = 1

        for j in range(len(flock)):
            
            same = True
                
            distancex = abs(self.x - flock[j].x)
            distancey = abs(self.y - flock[j].y)
            
            distancecomb = distancex + distancey

            if distancecomb == 0:
                same = False
                
            elif distancecomb <= 30 and same:
                degre = flock[j].vel.direction
                sumdirec += degre
                numOfNeighbors += 1
        
        #if sumdirec == 0 and numOfNeighbors == 0:
         #   avg = self.vel.direction
        #else:
        avg = sumdirec/numOfNeighbors
        steering = avg - self.vel.direction
        

        return steering
    
    def cohesion(self):
        sumdirecx = self.x
        sumdirecy = self.y
        numOfNeighbors = 1

        for j in range(len(flock)):
            
            same = True
                
            distancex = abs(self.x - flock[j].x)
            distancey = abs(self.y - flock[j].y)
            
            distancecomb = distancex + distancey

            if distancecomb == 0:
                same = False
                
            elif distancecomb <= 30 and same:
                degre = flock[j].x
                sumdirecx += flock[j].x
                sumdirecy += flock[j].y
                numOfNeighbors += 1
        
        #if sumdirec == 0 and numOfNeighbors == 0:
         #   avg = self.vel.direction
        #else:
        avgx = sumdirecx/numOfNeighbors
        avgy = sumdirecy/numOfNeighbors
        
        xdirc = avgx - self.x
        ydirc = avgy - self.y
        
        if xdirc == 0:
            direcToTurn = 0
        else:
            direcToTurn = atan(ydirc/xdirc)
        
        return direcToTurn


    def separation(self):
        avg = 0
        direcToTurn = 0
        numOfNeibors = 1
        
        for j in range(len(flock)):
            
            same = True
                
            distancex = abs(self.x - flock[j].x)
            distancey = abs(self.y - flock[j].y)
            
            distancecomb = distancex + distancey
            #direcToTurn = self.vel.direction
            
            if distancecomb == 0:
                same = False
                
            elif distancecomb <= 30 and same:
                xdirc = flock[j].x - self.x
                ydirc = flock[j].y - self.y
                
                numOfNeibors +=1
                
                if xdirc == 0:
                    pass
                else:    
                    avoidNei = (atan(ydirc/xdirc)*-1)
                    numToAdd = 31 - distancecomb
                    for i in range(int(numToAdd)):
                        direcToTurn += avoidNei
        
        avg = direcToTurn/numOfNeibors
        
        return avg

    def update(self):
        self.vel.update()
        self.accel.update()
        
        #print('allign')
        #print(self.allign())
        #print('cohesion')
        #print(self.cohesion())
        #print('separation')
        #print(self.separation())
        
        if self.x > width:
            self.x = 0;
        if self.y > height:
            self.y = 0;
        if self.x < 0:
            self.x = width;
        if self.y < 0:
            self.y = height;
        
        cap = 0.1
        self.accel.direction = self.allign() + self.separation()*cap + self.cohesion()*cap*cap*cap*cap*cap*cap*cap*cap
        print(self.accel.direction)
        self.vel.direction = self.vel.direction + self.accel.direction
        self.accel.direction = 0
        self.x = self.x + self.vel.xComp #+ cords[0]
        self.y =self.y + self.vel.yComp
        
        #if random(-10,10) < 0:
           #self.vel.direction += random(-0.1,0.1)
        #random motion to prove allign works

flock = []

def setup():
    size(height,width);
    background(240);
    for i in range(0,50):
        flock.append(boid(random(100,700),random(100,700)))
    


def draw():
    background(255)
    for i in range(len(flock)):
        flock[i].update()
        flock[i].show()
